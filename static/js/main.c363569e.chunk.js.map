{"version":3,"sources":["App.js","index.js"],"names":["App","useState","data","setData","years","setYears","effort","svgRef","useRef","console","log","useEffect","fetch","then","response","json","map","value","svg","select","current","attr","xScale","scaleBand","domain","d","index","range","yScale","scaleLinear","max","xAxis","axisBottom","style","call","yAxis","axisRight","selectAll","join","bandwidth","id","ref","className","onClick","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAyHeA,MA5Gf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAIPC,GAJO,KAIEC,oBAoDf,OA/CAC,QAAQC,IAAIR,GACZO,QAAQC,IAAIJ,GACZG,QAAQC,IAAIN,GAEZO,qBAAU,WACRC,MAPA,4FAQGC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACX,GACLC,EAAQD,EAAKA,KAAKc,KAAI,SAACC,GAAD,OAAWA,EAAM,OACvCZ,EAASH,EAAKA,KAAKc,KAAI,SAACC,GAAD,OAAWA,EAAM,YAE3C,IAEHN,qBAAU,WAER,IAAMO,EAAMC,YAAOZ,EAAOa,SAASC,KAAK,QAAS,KAAKA,KAAK,SAAU,KAG/DC,EAASC,cACZC,OAAOtB,EAAKc,KAAI,SAACS,EAAGC,GAAJ,OAAcA,MAC9BC,MAAM,CAAC,EAAG,MAMPC,EAASC,cACZL,OAAO,CAAC,EAAGM,YAAI5B,GAAM,SAACuB,GAAD,OAAOA,OAC5BE,MAAM,CAAC,IAAK,IAETI,EAAQC,YAAWV,GACzBJ,EAAIC,OAAO,WAAWc,MAAM,YAAa,qBAAqBC,KAAKH,GAEnE,IAAMI,EAAQC,YAAUR,GACxBV,EAAIC,OAAO,WAAWc,MAAM,YAAa,qBAAqBC,KAAKC,GAEnEjB,EACGmB,UAAU,QACVnC,KAAKA,GACLoC,KAAK,QACLjB,KAAK,QAAS,OACdA,KAAK,KAAK,SAACI,EAAGC,GAAJ,OAAcJ,EAAOI,MAC/BL,KAAK,IAAKO,GACVP,KAAK,QAASC,EAAOiB,aACrBlB,KAAK,UAAU,SAACI,EAAGC,GAAJ,OAAc,IAAME,EAAOH,QAC5C,CAACvB,IAGF,qCACE,oBAAIsC,GAAG,QAAP,mBACA,sBAAKC,IAAKlC,EAAV,UACE,mBAAGmC,UAAU,SAASF,GAAG,WACzB,mBAAGE,UAAU,SAASF,GAAG,cAE3B,wBAAQG,QAAS,kBAAMxC,EAAQD,EAAKc,KAAI,SAACC,GAAD,OAAWA,EAAQ,OAA3D,yBAGA,wBAAQ0B,QAAS,kBAAMxC,EAAQD,EAAK0C,QAAO,SAAC3B,GAAD,OAAWA,EAAQ,QAA9D,6BC1EN4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c363569e.chunk.js","sourcesContent":["import \"./styles.scss\";\nimport {\n  select,\n  axisBottom,\n  axisRight,\n  scaleLinear,\n  scaleBand,\n  scaleTime,\n  max,\n} from \"d3\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [years, setYears] = useState([]);\n  const [effort, setEffort] = useState([]);\n  const svgRef = useRef();\n\n  const dataUrl =\n    \"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json\";\n\n  console.log(data);\n  console.log(effort);\n  console.log(years);\n\n  useEffect(() => {\n    fetch(dataUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data.data.map((value) => value[1]));\n        setYears(data.data.map((value) => value[0]));\n      });\n  }, []);\n\n  useEffect(() => {\n    // console.log(svgRef);\n    const svg = select(svgRef.current).attr(\"width\", 500).attr(\"height\", 500);\n\n    // scaleTime\n    const xScale = scaleBand()\n      .domain(data.map((d, index) => index))\n      .range([0, 500]);\n\n    /*const xScale = scaleLinear()\n      .domain([0, max(data, (d) => d)])\n      .range([0, 500]);*/\n\n    const yScale = scaleLinear()\n      .domain([0, max(data, (d) => d)])\n      .range([500, 0]);\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style(\"transform\", \"translateY(500px)\").call(xAxis);\n\n    const yAxis = axisRight(yScale);\n    svg.select(\".y-axis\").style(\"transform\", \"translateX(500px)\").call(yAxis);\n\n    svg\n      .selectAll(\".bar\")\n      .data(data)\n      .join(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", (d, index) => xScale(index))\n      .attr(\"y\", yScale)\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"height\", (d, index) => 500 - yScale(d));\n  }, [data]);\n\n  return (\n    <>\n      <h1 id=\"title\">Title</h1>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" id=\"x-axis\" />\n        <g className=\"y-axis\" id=\"y-axis\" />\n      </svg>\n      <button onClick={() => setData(data.map((value) => value + 5))}>\n        Update Data\n      </button>\n      <button onClick={() => setData(data.filter((value) => value < 35))}>\n        Filter Data\n      </button>\n    </>\n  );\n\n  /*const [data, setData] = useState([])\n  const ref = useRef()\n\n  console.log(data)\n  console.log(ref)\n\n  const dataUrl = \"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json\";\n\n  const temperatureData = [ 8, 5, 13, 9, 12 ]\n  d3.select(ref.current)\n        .selectAll(\"h2\")\n        .data(temperatureData)\n        .enter()\n            .append(\"h2\")\n            .text(\"New Temperature\")\n\n  \n  useEffect(() => {\n    fetch(dataUrl)\n      .then(response => response.json())\n      .then(data => {\n        setData(data.data)\n      })\n  }, []);\n  \n  return (\n    <div className=\"app\">\n      <div className=\"panel\">\n        <h1>Hello World</h1>\n      </div>\n      <div id=\"myDiv\" ref={ref}></div>\n    </div>\n  );\n  return ( <BarChart /> )*/\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}